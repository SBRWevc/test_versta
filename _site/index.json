{
  "api/test_versta.Controllers.AccountController.html": {
    "href": "api/test_versta.Controllers.AccountController.html",
    "title": "Class AccountController",
    "keywords": "Class AccountController Namespace test_versta.Controllers Assembly test_versta.dll Контроллер для управления учетными записями пользователей. Позволяет выполнять вход, регистрацию и выход из системы. public class AccountController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AccountController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountController(UserManager<ApplicationUser>, SignInManager<ApplicationUser>) Контроллер для управления учетными записями пользователей. Позволяет выполнять вход, регистрацию и выход из системы. public AccountController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager) Parameters userManager UserManager<ApplicationUser> signInManager SignInManager<ApplicationUser> Methods Login(string?) Отображает страницу входа. [HttpGet] public IActionResult Login(string? returnUrl = null) Parameters returnUrl string URL для перенаправления после успешного входа. Returns IActionResult Страница входа. Login(LoginViewModel) Обрабатывает попытку входа пользователя. [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Login(LoginViewModel model) Parameters model LoginViewModel Модель данных для входа. Returns Task<IActionResult> Перенаправляет на указанную страницу или страницу заказов. Logout() Выполняет выход пользователя из системы. [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Logout() Returns Task<IActionResult> Перенаправляет на страницу заказов. Register(string?) Отображает страницу регистрации нового пользователя. [HttpGet] public IActionResult Register(string? returnUrl = null) Parameters returnUrl string URL для перенаправления после успешной регистрации. Returns IActionResult Страница регистрации. Register(RegisterViewModel) Обрабатывает регистрацию нового пользователя. [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Register(RegisterViewModel model) Parameters model RegisterViewModel Модель данных для регистрации. Returns Task<IActionResult> Перенаправляет на указанную страницу или страницу заказов."
  },
  "api/test_versta.Controllers.OrdersController.html": {
    "href": "api/test_versta.Controllers.OrdersController.html",
    "title": "Class OrdersController",
    "keywords": "Class OrdersController Namespace test_versta.Controllers Assembly test_versta.dll Контроллер для управления заказами. Позволяет клиентам просматривать свои заказы, а администраторам — все заказы. Также поддерживает создание заказов без авторизации. public class OrdersController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller OrdersController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OrdersController(ApplicationDbContext, IHubContext<OrdersHub>) Контроллер для управления заказами. Позволяет клиентам просматривать свои заказы, а администраторам — все заказы. Также поддерживает создание заказов без авторизации. public OrdersController(ApplicationDbContext context, IHubContext<OrdersHub> ordersHub) Parameters context ApplicationDbContext ordersHub IHubContext<OrdersHub> Methods Create() Отображает форму создания нового заказа. Доступна всем пользователям, включая неавторизованных. [AllowAnonymous] public IActionResult Create() Returns IActionResult Страница создания заказа. Create(Order) Создаёт новый заказ на основе введённых пользователем данных. Доступно всем пользователям, включая неавторизованных. Если пользователь авторизован, заказ привязывается к его учётной записи. [AllowAnonymous] [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Create(Order order) Parameters order Order Модель заказа, содержащая информацию об отправке. Returns Task<IActionResult> Редирект на страницу создания заказа после успешного оформления. Details(int?) Просмотр деталей конкретного заказа. Доступен только авторизованным пользователям. Клиенты могут просматривать только свои заказы, администраторы — любые. [Authorize] public Task<IActionResult> Details(int? id) Parameters id int? Идентификатор заказа. Returns Task<IActionResult> Страница с деталями заказа. Index() Просмотр списка заказов. Доступен только авторизованным пользователям. Клиенты могут видеть только свои заказы, администраторы — все. [Authorize] public Task<IActionResult> Index() Returns Task<IActionResult> Страница со списком заказов."
  },
  "api/test_versta.Controllers.html": {
    "href": "api/test_versta.Controllers.html",
    "title": "Namespace test_versta.Controllers",
    "keywords": "Namespace test_versta.Controllers Classes AccountController Контроллер для управления учетными записями пользователей. Позволяет выполнять вход, регистрацию и выход из системы. OrdersController Контроллер для управления заказами. Позволяет клиентам просматривать свои заказы, а администраторам — все заказы. Также поддерживает создание заказов без авторизации."
  },
  "api/test_versta.Data.ApplicationDbContext.html": {
    "href": "api/test_versta.Data.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext",
    "keywords": "Class ApplicationDbContext Namespace test_versta.Data Assembly test_versta.dll Контекст базы данных приложения, расширяющий IdentityDbContext для работы с аутентификацией и авторизацией. public class ApplicationDbContext : IdentityDbContext<ApplicationUser>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<ApplicationUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> IdentityDbContext<ApplicationUser, IdentityRole, string> IdentityDbContext<ApplicationUser> ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<ApplicationUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityDbContext<ApplicationUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.UserRoles IdentityDbContext<ApplicationUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.Roles IdentityDbContext<ApplicationUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.RoleClaims IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.Users IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserClaims IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserLogins IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserTokens IdentityUserContext<ApplicationUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Этот контекст содержит таблицы для пользователей и заказов. Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) Инициализирует новый экземпляр класса ApplicationDbContext. public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Опции конфигурации для контекста базы данных. Properties Orders Коллекция заказов в базе данных. public DbSet<Order> Orders { get; set; } Property Value DbSet<Order>"
  },
  "api/test_versta.Data.html": {
    "href": "api/test_versta.Data.html",
    "title": "Namespace test_versta.Data",
    "keywords": "Namespace test_versta.Data Classes ApplicationDbContext Контекст базы данных приложения, расширяющий IdentityDbContext для работы с аутентификацией и авторизацией."
  },
  "api/test_versta.Hubs.OrdersHub.html": {
    "href": "api/test_versta.Hubs.OrdersHub.html",
    "title": "Class OrdersHub",
    "keywords": "Class OrdersHub Namespace test_versta.Hubs Assembly test_versta.dll SignalR-хаб для передачи уведомлений о новых заказах. public class OrdersHub : Hub, IDisposable Inheritance object Hub OrdersHub Implements IDisposable Inherited Members Hub.OnConnectedAsync() Hub.OnDisconnectedAsync(Exception) Hub.Dispose(bool) Hub.Dispose() Hub.Clients Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/test_versta.Hubs.html": {
    "href": "api/test_versta.Hubs.html",
    "title": "Namespace test_versta.Hubs",
    "keywords": "Namespace test_versta.Hubs Classes OrdersHub SignalR-хаб для передачи уведомлений о новых заказах."
  },
  "api/test_versta.Models.ApplicationUser.html": {
    "href": "api/test_versta.Models.ApplicationUser.html",
    "title": "Class ApplicationUser",
    "keywords": "Class ApplicationUser Namespace test_versta.Models Assembly test_versta.dll Представляет пользователя в системе с поддержкой ASP.NET Identity. public class ApplicationUser : IdentityUser Inheritance object IdentityUser<string> IdentityUser ApplicationUser Inherited Members IdentityUser<string>.ToString() IdentityUser<string>.Id IdentityUser<string>.UserName IdentityUser<string>.NormalizedUserName IdentityUser<string>.Email IdentityUser<string>.NormalizedEmail IdentityUser<string>.EmailConfirmed IdentityUser<string>.PasswordHash IdentityUser<string>.SecurityStamp IdentityUser<string>.ConcurrencyStamp IdentityUser<string>.PhoneNumber IdentityUser<string>.PhoneNumberConfirmed IdentityUser<string>.TwoFactorEnabled IdentityUser<string>.LockoutEnd IdentityUser<string>.LockoutEnabled IdentityUser<string>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FullName Полное имя пользователя. public string FullName { get; set; } Property Value string"
  },
  "api/test_versta.Models.Order.html": {
    "href": "api/test_versta.Models.Order.html",
    "title": "Class Order",
    "keywords": "Class Order Namespace test_versta.Models Assembly test_versta.dll Представляет заказ на доставку. public class Order Inheritance object Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Client Клиент, оформивший заказ. public ApplicationUser? Client { get; set; } Property Value ApplicationUser ClientId Идентификатор клиента, оформившего заказ. public string? ClientId { get; set; } Property Value string OrderId Уникальный идентификатор заказа. [Key] public int OrderId { get; set; } Property Value int PickupDate Дата забора груза. [Required(ErrorMessage = \"Укажите дату забора груза\")] [Display(Name = \"Дата забора груза\")] [DataType(DataType.Date)] public DateTime PickupDate { get; set; } Property Value DateTime RecipientAddress Адрес получателя. [Required(ErrorMessage = \"Укажите адрес получателя\")] [Display(Name = \"Адрес получателя\")] [StringLength(200, MinimumLength = 5, ErrorMessage = \"Адрес получателя должен содержать от 5 до 200 символов\")] public string RecipientAddress { get; set; } Property Value string RecipientCity Город получателя. [Required(ErrorMessage = \"Укажите город получателя\")] [Display(Name = \"Город получателя\")] [StringLength(100, MinimumLength = 2, ErrorMessage = \"Город получателя должен содержать от 2 до 100 символов\")] public string RecipientCity { get; set; } Property Value string SenderAddress Адрес отправителя. [Required(ErrorMessage = \"Укажите адрес отправителя\")] [Display(Name = \"Адрес отправителя\")] [StringLength(200, MinimumLength = 5, ErrorMessage = \"Адрес отправителя должен содержать от 5 до 200 символов\")] public string SenderAddress { get; set; } Property Value string SenderCity Город отправителя. [Required(ErrorMessage = \"Укажите город отправителя\")] [Display(Name = \"Город отправителя\")] [StringLength(100, MinimumLength = 2, ErrorMessage = \"Город отправителя должен содержать от 2 до 100 символов\")] public string SenderCity { get; set; } Property Value string Weight Вес груза (в кг). [Required(ErrorMessage = \"Укажите вес груза\")] [Display(Name = \"Вес груза\")] [Range(0.1, 1000, ErrorMessage = \"Вес груза должен быть в пределах от 0.1 до 1000 кг\")] public decimal Weight { get; set; } Property Value decimal"
  },
  "api/test_versta.Models.html": {
    "href": "api/test_versta.Models.html",
    "title": "Namespace test_versta.Models",
    "keywords": "Namespace test_versta.Models Classes ApplicationUser Представляет пользователя в системе с поддержкой ASP.NET Identity. Order Представляет заказ на доставку."
  },
  "api/test_versta.Services.FutureOrTodayAttribute.html": {
    "href": "api/test_versta.Services.FutureOrTodayAttribute.html",
    "title": "Class FutureOrTodayAttribute",
    "keywords": "Class FutureOrTodayAttribute Namespace test_versta.Services Assembly test_versta.dll Атрибут валидации, проверяющий, что дата является сегодняшней или будущей. public class FutureOrTodayAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute FutureOrTodayAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object, ValidationContext) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object) Determines whether the specified value of the object is valid. public override bool IsValid(object value) Parameters value object The value of the object to validate. Returns bool true if the specified value is valid; otherwise, false. Exceptions InvalidOperationException The current attribute is malformed. NotImplementedException Neither overload of IsValid has been implemented by a derived class."
  },
  "api/test_versta.Services.InitialData.html": {
    "href": "api/test_versta.Services.InitialData.html",
    "title": "Class InitialData",
    "keywords": "Class InitialData Namespace test_versta.Services Assembly test_versta.dll Класс для начальной инициализации данных в системе. Создает роли и администратора, если они отсутствуют. public class InitialData Inheritance object InitialData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedRolesAndAdminAsync(UserManager<ApplicationUser>, RoleManager<IdentityRole>) Инициализирует роли и администратора в системе. public static Task SeedRolesAndAdminAsync(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager) Parameters userManager UserManager<ApplicationUser> Менеджер пользователей. roleManager RoleManager<IdentityRole> Менеджер ролей. Returns Task Асинхронная задача."
  },
  "api/test_versta.Services.html": {
    "href": "api/test_versta.Services.html",
    "title": "Namespace test_versta.Services",
    "keywords": "Namespace test_versta.Services Classes FutureOrTodayAttribute Атрибут валидации, проверяющий, что дата является сегодняшней или будущей. InitialData Класс для начальной инициализации данных в системе. Создает роли и администратора, если они отсутствуют."
  },
  "api/test_versta.ViewModels.LoginViewModel.html": {
    "href": "api/test_versta.ViewModels.LoginViewModel.html",
    "title": "Class LoginViewModel",
    "keywords": "Class LoginViewModel Namespace test_versta.ViewModels Assembly test_versta.dll Модель представления для входа в систему. public class LoginViewModel Inheritance object LoginViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Электронная почта пользователя. [Required(ErrorMessage = \"Введите адрес электронной почты.\")] [EmailAddress(ErrorMessage = \"Введите корректный адрес электронной почты.\")] public string Email { get; set; } Property Value string Password Пароль пользователя. [Required(ErrorMessage = \"Введите пароль.\")] [DataType(DataType.Password)] public string Password { get; set; } Property Value string RememberMe Запомнить пользователя при следующем входе. public bool RememberMe { get; set; } Property Value bool ReturnUrl URL, на который будет перенаправлен пользователь после успешного входа. public string? ReturnUrl { get; set; } Property Value string"
  },
  "api/test_versta.ViewModels.RegisterViewModel.html": {
    "href": "api/test_versta.ViewModels.RegisterViewModel.html",
    "title": "Class RegisterViewModel",
    "keywords": "Class RegisterViewModel Namespace test_versta.ViewModels Assembly test_versta.dll Модель представления для регистрации нового пользователя. public class RegisterViewModel Inheritance object RegisterViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConfirmPassword Подтверждение пароля. Должно совпадать с полем Password. [DataType(DataType.Password)] [Compare(\"Password\", ErrorMessage = \"Пароли не совпадают.\")] public string ConfirmPassword { get; set; } Property Value string Email Адрес электронной почты пользователя. [Required] [EmailAddress] public string Email { get; set; } Property Value string FullName Полное имя пользователя. [Required] public string FullName { get; set; } Property Value string Password Пароль пользователя. [Required] [DataType(DataType.Password)] public string Password { get; set; } Property Value string ReturnUrl URL-адрес, на который будет перенаправлен пользователь после успешной регистрации. public string? ReturnUrl { get; set; } Property Value string"
  },
  "api/test_versta.ViewModels.html": {
    "href": "api/test_versta.ViewModels.html",
    "title": "Namespace test_versta.ViewModels",
    "keywords": "Namespace test_versta.ViewModels Classes LoginViewModel Модель представления для входа в систему. RegisterViewModel Модель представления для регистрации нового пользователя."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Test Versta",
    "keywords": "Test Versta Test Versta — это демонстрационное веб-приложение для управления заказами на доставку. Проект показывает, как реализовать создание заказов, аутентификацию и авторизацию (с ролями \"Клиент\" и \"Администратор\"), а также применение принципа mobile-first с использованием Bootstrap 5. Функциональность Управление заказами Создание заказа: доступно всем пользователям (авторизованным и неавторизованным). Просмотр заказов: Клиенты видят только свои заказы. Администраторы видят все заказы. Аутентификация и авторизация Регистрация и вход в систему через ASP.NET Identity. Автоматическое создание учётной записи администратора при первом запуске (если таковой отсутствует). Адаптивный дизайн Mobile-first подход с использованием Bootstrap 5. Технологии Backend: ASP.NET (Core) (на базе .NET 9) Frontend: ASP.NET MVC (Razor Views), Bootstrap 5 Data Access: Entity Framework Core База данных: PostgreSQL Аутентификация: ASP.NET Identity Предварительные условия .NET 9 SDK PostgreSQL Git Как запустить проект Следуйте этим шагам для локального запуска приложения: Клонируйте репозиторий: git clone https://github.com/SBRWevc/test_versta.git cd test_versta Настройте подключение к базе данных: Если вас устраивает использование с тестовым сервером, прописанным в приложении, то ничего менять не надо. Если вы хотите подключиться к своей базе данных: Откройте файл appsettings.json и обновите строку подключения DefaultConnection с учётом ваших настроек PostgreSQL: \"ConnectionStrings\": { \"DefaultConnection\": \"Host=localhost;Port=5432;Database=TestVerstaDb;Username=yourusername;Password=yourpassword\" } Примените миграции базы данных (если изменена строка подключения): Откройте терминал в корневой папке проекта и выполните команды: dotnet ef migrations add InitialCreate dotnet ef database update Пользовательский вход и просмотр заказов: Создание заказа: доступно всем пользователям. Просмотр заказов: для доступа к странице с заказами необходимо выполнить вход: Нажмите \"Войти\" в верхнем меню и авторизуйтесь. Если у вас ещё нет аккаунта, воспользуйтесь страницей регистрации. Учётная запись администратора: При первом запуске, если администратор отсутствует, система автоматически создаст его. Email: admin@example.com Пароль: Admin123! Генерация документации (опционально): Для создания документации с помощью DocFX выполните следующие шаги: Убедитесь, что DocFX установлен (например, через Chocolatey). Инициализируйте документационный проект: docfx init -q Настройте файл docfx.json (подключите XML-документацию, сгенерированную при сборке проекта). Сгенерируйте документацию: docfx build Для локального просмотра выполните: docfx serve _site Наслаждайтесь работой с Test Versta!"
  },
  "readme.html": {
    "href": "readme.html",
    "title": "Test Versta",
    "keywords": "Test Versta Test Versta — это демонстрационное веб-приложение для управления заказами на доставку. Проект показывает, как реализовать создание заказов, аутентификацию и авторизацию (с ролями \"Клиент\" и \"Администратор\"), а также применение принципа mobile-first с использованием Bootstrap 5. Функциональность Управление заказами Создание заказа: доступно всем пользователям (авторизованным и неавторизованным). Просмотр заказов: Клиенты видят только свои заказы. Администраторы видят все заказы. Аутентификация и авторизация Регистрация и вход в систему через ASP.NET Identity. Автоматическое создание учётной записи администратора при первом запуске (если таковой отсутствует). Адаптивный дизайн Mobile-first подход с использованием Bootstrap 5. Технологии Backend: ASP.NET (Core) (на базе .NET 9) Frontend: ASP.NET MVC (Razor Views), Bootstrap 5 Data Access: Entity Framework Core База данных: PostgreSQL Аутентификация: ASP.NET Identity Предварительные условия .NET 9 SDK PostgreSQL Git Как запустить проект Следуйте этим шагам для локального запуска приложения: Клонируйте репозиторий: git clone https://github.com/SBRWevc/test_versta.git cd test_versta Настройте подключение к базе данных: Если вас устраивает использование с тестовым сервером, прописанным в приложении, то ничего менять не надо. Если вы хотите подключиться к своей базе данных: Откройте файл appsettings.json и обновите строку подключения DefaultConnection с учётом ваших настроек PostgreSQL: \"ConnectionStrings\": { \"DefaultConnection\": \"Host=localhost;Port=5432;Database=TestVerstaDb;Username=yourusername;Password=yourpassword\" } Примените миграции базы данных (если изменена строка подключения): Откройте терминал в корневой папке проекта и выполните команды: dotnet ef migrations add InitialCreate dotnet ef database update Пользовательский вход и просмотр заказов: Создание заказа: доступно всем пользователям. Просмотр заказов: для доступа к странице с заказами необходимо выполнить вход: Нажмите \"Войти\" в верхнем меню и авторизуйтесь. Если у вас ещё нет аккаунта, воспользуйтесь страницей регистрации. Учётная запись администратора: При первом запуске, если администратор отсутствует, система автоматически создаст его. Email: admin@example.com Пароль: Admin123! Генерация документации (опционально): Для создания документации с помощью DocFX выполните следующие шаги: Убедитесь, что DocFX установлен (например, через Chocolatey). Инициализируйте документационный проект: docfx init -q Настройте файл docfx.json (подключите XML-документацию, сгенерированную при сборке проекта). Сгенерируйте документацию: docfx build Для локального просмотра выполните: docfx serve _site Наслаждайтесь работой с Test Versta!"
  },
  "wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT)",
    "keywords": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}